This document specifies the desired functions and specifications for the project.
Started: 10 June 2014

========================================================

Overall:
- Flexible, robust code to read, summarize, and regrid CMIP5 data.
- Basic summarized CMIP5 data included with package

========================================================

Input files:
- netCDF file(s) downloaded from CMIP5 repository
	+ deal with arbitrary file structures: list.files( ..., recursive=TRUE )

Main outputs of interest:
- Zonal (including global) total/means/sd
	+ annual
	+ monthly
	+ reported time step
- Gridded temporal mean/totals/sd
	+ annual
	+ monthly
	+ reported time step

Visualizations:			**BBL: necessary?
- Global map
- Zonal total/means

Formats:
- Probably want a simple data frame option for less-experienced users

Optional logging **KTB: What do you mean by this?

========================================================

Internal data representation options:
- list(time, lon, lat, timeConst, val, sd(?), id) 
	+1D arrays: time, lon, lat
	+3D arrays: val, sd
	+lists (?): 
		-timeConst: time invariant parameters like grid area and land fraction
		-id:contains provenance i.e. modelID, experimentID
		
	**KTB: I think this is the most straightforward
	**BBL: for each model/scenario/etc.? *KTB: yes
	**BBL: sd? Based on what? *KTB: ensembles if available
	
- data.frame(time, lat, lon, val)
	**BBL: possibly, esp. if we use dplyr package
	**KTB: how does this interact with image?
	
- raster object
   **KTB: This has built in bilinear projection function that might be useful
   (though not an area-weighted projection which we would need for
   large grid shifts)

Support for/use of parallelization?
	- e.g. using 'parallel' package (R >2.14.0)
	- use dplyr? *Extremely* fast for data frames

Will need option to write out data to disk as we process, right? And
return a file handle to the user instead of actual data?
Data structures could get big with multiple models, scenarios, ensembles.

========================================================

Basic function tasks:
+ Manage downloads (basic file calls and string manipulation)
	-List downloads by model-experiment-variable (split file string and store in data.frame)
	-Check that time periods and ensembles match across variables for a given model-experiment
	-Check that files are non-empty (?)

+ Pre-processing (raster/ncdf package here!)
	-Merge 
		*time split experiment-model-variable
		*ensembles (mean, sd, range)
		*time periods (daily/monthly -> annual/decade gridded)
		*seasonal cycle
	-Extract (?this may be gravy)
		*time period
		*spatial mask
	-Filter values based on abs/rel tolerances
	-Shift projection (area weighted vs bilinear interpolation)
	-Save for analysis/visualization as ncdf

+ Visualization/Analysis
	-Convert to data.frame(time, lat, lon, val)
	-Convert to array
	-Pretty maps/plots examples

========================================================

Edge/quirky cases to keep in mind:
- Data split across arbitrary number of files
- Monthly versus annual files vs daily vs hourly (CMIP has multiple time period outputs)
- Duplicate files
	+KTB: probably not a concern given that files have informative naming conventions


========================================================

Software:

	roxygen2 for documentation
	devtools to automate build and staging
	
	RStudio for package development?
	
	ncdf4 (what is difference between this and ncdf?)
	+KTB: Different netcdf formats, sadly some doesnâ€™t play nicely with the other versioning
	
	raster
	+Con: poor support for netcdf files (i.e. no way to label the layers directly with time stamps)
	+Pro: good management for LARGE files, good regridding
	
Resources:

	https://support.rstudio.com/hc/en-us/articles/200486488-Developing-Packages-with-RStudio
	http://adv-r.had.co.nz/Package-basics.html
	http://adv-r.had.co.nz/Philosophy.html

	http://stackoverflow.com/questions/20520837/r-plotting-netcdf-climate-data
	http://stackoverflow.com/questions/19330710/why-do-i-get-different-results-in-plotting-a-netcdf-layer-with-imagex-y-z-an
		+example of ncdf mapping

	http://oscarperpinan.github.io/rastervis/
		+visualization for rasters
	http://cran.r-project.org/web/views/Spatial.html
		+geospatial packages for Rl

One thing we might look at as a model (both good and not-good) is RNCEP package
	NCEP.aggregate(wx.data, YEARS = TRUE, MONTHS = TRUE, DAYS = TRUE, HOURS = TRUE, fxn = "%>0")

Think about a technical/note paper in Biogeosciences, PeerJ, PLOS ONE, etc.?
